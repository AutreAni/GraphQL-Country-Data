{"version":3,"sources":["query.js","components/Result.js","components/Loading.js","components/Error.js","components/Content.js","Video/Pexels Videos 1851190.mp4","App.js","index.js"],"names":["getCountryData","gql","Result","data","console","log","className","country","name","native","capital","emoji","currency","languages","map","language","index","Loading","Error","message","Content","useState","value","setValue","useLazyQuery","getCountry","loading","error","errorMsg","setErrorMsg","onSubmit","e","preventDefault","length","variables","code","type","maxLength","onChange","text","target","lastChar","toUpperCase","charCodeAt","placeholder","client","ApolloClient","cache","InMemoryCache","uri","options","heaers","App","ApolloProvider","autoPlay","muted","loop","src","globe","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.de56e186.chunk.js","sourcesContent":["import { gql } from \"@apollo/client\";\r\n\r\nexport const getCountryData = gql`\r\n  query country($code: ID!) {\r\n        country(code: $code) {\r\n          name\r\n          native\r\n          capital\r\n          emoji\r\n          currency\r\n          languages {\r\n            code\r\n            name\r\n          }\r\n        }\r\n    }\r\n`;","const Result = ({ data }) => {\r\n    if (data) console.log(data)\r\n    return (\r\n        <div className='country-data'>\r\n            <div className='data-field'>\r\n                <span className='field-name'>Name</span>\r\n                <span>{data.country.name}</span>\r\n            </div>\r\n            <div className='data-field'>\r\n                <span className='field-name'>Native</span>\r\n                <span>{data.country.native}</span>\r\n            </div>\r\n            <div className='data-field'>\r\n                <span className='field-name'>Capital</span>\r\n                <span>{data.country.capital}</span>\r\n            </div>\r\n            <div className='data-field'>\r\n                <span className='field-name'>Flag</span>\r\n                <span className=\"emoji\">{data.country.emoji}</span>\r\n            </div>\r\n            <div className='data-field'>\r\n                <span className='field-name'>Currency</span>\r\n                <span>{data.country.currency}</span>\r\n            </div>\r\n            <div className='data-field'>\r\n                <span className='field-name'>Languages</span>\r\n                <span className='languages'>\r\n                    {data.country.languages.map((language, index) => {\r\n                        return (\r\n                            <span key = {index}>\r\n                                {language.name}\r\n                            </span>\r\n                        )\r\n                    })}\r\n                </span>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Result;","import '../css-modules/loading.css';\r\n\r\nconst Loading = () => {\r\n    return (\r\n        <div className=\"lds-default\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div>\r\n        )\r\n}\r\n\r\nexport default Loading;","import '../css-modules/error.css';\r\n\r\nconst Error = ({message}) => {\r\n    return ( \r\n        <div className = 'error'>\r\n        <p>{message}</p>\r\n        <div className = \"figure\">\r\n        <div className = \"figcaption\">\r\n        <div className=\"sad-mac\"></div>\r\n        </div>\r\n        </div>\r\n    </div>\r\n     );\r\n}\r\n \r\nexport default Error;","import { useState } from 'react';\r\nimport { useLazyQuery } from \"@apollo/client\";\r\nimport { getCountryData } from \"../query\";\r\nimport Result from './Result';\r\nimport Loading from './Loading';\r\nimport Error from './Error';\r\n\r\nconst Content = () => {\r\n    const [value, setValue] = useState(\"\");\r\n    const [getCountry, { data, loading, error }] = useLazyQuery(getCountryData);\r\n    const [errorMsg, setErrorMsg] = useState();\r\n\r\n    const handleChange = (e) => {\r\n        let text = e.target.value;\r\n        let lastChar = text.length - 1;\r\n        setValue(text.toUpperCase());\r\n        if ((text.charCodeAt(lastChar) >= 65 && text.charCodeAt(lastChar) <= 90) ||\r\n            (text.charCodeAt(lastChar) >= 97 && text.charCodeAt(lastChar) <= 122) ||\r\n            !text.length) {\r\n            setErrorMsg(null);\r\n        } else {\r\n            setErrorMsg(\"*Country code should contain only letters\");\r\n            return;\r\n        }\r\n    }\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        if (value.length !== 2) {\r\n            setErrorMsg(\"*Country code should be two letters\");\r\n            return;\r\n        }\r\n        getCountry({ variables: { code: value } });\r\n        setValue(\"\");\r\n    }\r\n\r\n    \r\n    return (\r\n        <div className=\"content\">\r\n            <div className=\"searchField\">\r\n                <div className=\"container\">\r\n                    <form onSubmit={handleSubmit}>\r\n                        <input type=\"text\"\r\n                            maxLength='2'\r\n                            value={value}\r\n                            onChange={handleChange}\r\n                            placeholder=\"Counrty Code\"\r\n                        >\r\n                        </input>\r\n                        <button type='submit'\r\n                        >Find\r\n                        </button>\r\n                        <p className='errorMsg'>\r\n                            {errorMsg}\r\n                        </p>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n            <div className='result'>\r\n                <div className=\"container\">\r\n\r\n                    {\r\n                        loading ?\r\n                            <Loading />\r\n                            : null\r\n                    }\r\n                    {\r\n                        data && data.country ?\r\n                            <Result data={data} />\r\n                            : null\r\n                    }\r\n                    {\r\n                        data && !data.country ?\r\n                            <Error message=\"Country not found\" />\r\n                            : null\r\n                    }\r\n                    {\r\n                        error ?\r\n                            <Error message={error.message} />\r\n                            : null\r\n                    }\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Content;","export default __webpack_public_path__ + \"static/media/Pexels Videos 1851190.217bc138.mp4\";","import './App.css';\nimport { ApolloClient, InMemoryCache, ApolloProvider } from \"@apollo/client\";\nimport Content from './components/Content';\nimport globe from './Video/Pexels Videos 1851190.mp4';\n\nconst client = new ApolloClient({\n  cache: new InMemoryCache(),\n  uri: \"https://countries.trevorblades.com\",\n  options: {\n    heaers: {\n      \"Accept-Encoding\": \"gzip, deflate, br\",\n      \"Content-Type\": \"application/json\",\n      \"Connection\": \"keep-alive\",\n      \"DNT\": \"1\",\n      \"Origin\": \"https://countries.trevorblades.com\"\n    }\n  }\n});\n\nfunction App() {\n   return (\n    <ApolloProvider client={client}>\n      <div className = \"App\">\n      <video autoPlay muted loop>\n       <source src= {globe}\n        type=\"video/mp4\"/>\n        </video>\n        <Content/>\n      </div>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}